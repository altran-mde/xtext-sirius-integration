/*
 * generated by Xtext 2.22.0
 */
package com.example.classes.serializer;

import com.example.classes.Association;
import com.example.classes.Attribute;
import com.example.classes.ClassModel;
import com.example.classes.ClassRef;
import com.example.classes.ClassesPackage;
import com.example.classes.Constant;
import com.example.classes.ConstantRef;
import com.example.classes.IntegerLiteral;
import com.example.classes.IntegerType;
import com.example.classes.StringType;
import com.example.classes.services.InlineeditGrammarAccess;
import com.example.serializer.ClassesSemanticSequencer;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public class InlineeditSemanticSequencer extends ClassesSemanticSequencer {

	@Inject
	private InlineeditGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ClassesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ClassesPackage.ASSOCIATION:
				sequence_Association_Description(context, (Association) semanticObject); 
				return; 
			case ClassesPackage.ATTRIBUTE:
				sequence_Attribute_Description(context, (Attribute) semanticObject); 
				return; 
			case ClassesPackage.CLASS:
				sequence_Class_Description(context, (com.example.classes.Class) semanticObject); 
				return; 
			case ClassesPackage.CLASS_MODEL:
				sequence_ClassModel(context, (ClassModel) semanticObject); 
				return; 
			case ClassesPackage.CLASS_REF:
				sequence_ClassRef(context, (ClassRef) semanticObject); 
				return; 
			case ClassesPackage.CONSTANT:
				sequence_Constant_Description(context, (Constant) semanticObject); 
				return; 
			case ClassesPackage.CONSTANT_REF:
				sequence_ConstantRef(context, (ConstantRef) semanticObject); 
				return; 
			case ClassesPackage.INTEGER_LITERAL:
				sequence_IntegerLiteral(context, (IntegerLiteral) semanticObject); 
				return; 
			case ClassesPackage.INTEGER_TYPE:
				sequence_IntegerType(context, (IntegerType) semanticObject); 
				return; 
			case ClassesPackage.STRING_TYPE:
				sequence_StringType(context, (StringType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Association returns Association
	 *     Content returns Association
	 *
	 * Constraint:
	 *     (
	 *         description=DESCRIPTION_TEXT? 
	 *         name=ID 
	 *         lowerBound=Value 
	 *         upperBound=Value 
	 *         source=[Class|ID] 
	 *         target=[Class|ID]
	 *     )
	 */
	protected void sequence_Association_Description(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
