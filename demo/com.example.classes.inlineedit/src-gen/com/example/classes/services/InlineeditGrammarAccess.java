/*
 * generated by Xtext 2.22.0
 */
package com.example.classes.services;

import com.example.services.ClassesGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class InlineeditGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class InlineClassModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.classes.Inlineedit.InlineClassModel");
		private final RuleCall cClassModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InlineClassModel ClassModel:
		//	ClassModel;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassModel
		public RuleCall getClassModelParserRuleCall() { return cClassModelParserRuleCall; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.classes.Inlineedit.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerBoundValueParserRuleCall_4_0 = (RuleCall)cLowerBoundAssignment_4.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpperBoundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpperBoundValueParserRuleCall_6_0 = (RuleCall)cUpperBoundAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cSourceClassCrossReference_8_0 = (CrossReference)cSourceAssignment_8.eContents().get(0);
		private final RuleCall cSourceClassIDTerminalRuleCall_8_0_1 = (RuleCall)cSourceClassCrossReference_8_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetClassCrossReference_10_0 = (CrossReference)cTargetAssignment_10.eContents().get(0);
		private final RuleCall cTargetClassIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetClassCrossReference_10_0.eContents().get(1);
		
		//@Override
		//Association:
		//	Description?
		//	'association'
		//	name=ID
		//	'[' lowerBound=Value '..' upperBound=Value ']'
		//	source=[Class] '-->' target=[Class];
		@Override public ParserRule getRule() { return rule; }
		
		//Description? 'association' name=ID '[' lowerBound=Value '..' upperBound=Value ']' source=[Class] '-->' target=[Class]
		public Group getGroup() { return cGroup; }
		
		//Description?
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//'association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//lowerBound=Value
		public Assignment getLowerBoundAssignment_4() { return cLowerBoundAssignment_4; }
		
		//Value
		public RuleCall getLowerBoundValueParserRuleCall_4_0() { return cLowerBoundValueParserRuleCall_4_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_5() { return cFullStopFullStopKeyword_5; }
		
		//upperBound=Value
		public Assignment getUpperBoundAssignment_6() { return cUpperBoundAssignment_6; }
		
		//Value
		public RuleCall getUpperBoundValueParserRuleCall_6_0() { return cUpperBoundValueParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//source=[Class]
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//[Class]
		public CrossReference getSourceClassCrossReference_8_0() { return cSourceClassCrossReference_8_0; }
		
		//ID
		public RuleCall getSourceClassIDTerminalRuleCall_8_0_1() { return cSourceClassIDTerminalRuleCall_8_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_9; }
		
		//target=[Class]
		public Assignment getTargetAssignment_10() { return cTargetAssignment_10; }
		
		//[Class]
		public CrossReference getTargetClassCrossReference_10_0() { return cTargetClassCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetClassIDTerminalRuleCall_10_0_1() { return cTargetClassIDTerminalRuleCall_10_0_1; }
	}
	
	
	private final InlineClassModelElements pInlineClassModel;
	private final AssociationElements pAssociation;
	
	private final Grammar grammar;
	
	private final ClassesGrammarAccess gaClasses;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InlineeditGrammarAccess(GrammarProvider grammarProvider,
			ClassesGrammarAccess gaClasses,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaClasses = gaClasses;
		this.gaTerminals = gaTerminals;
		this.pInlineClassModel = new InlineClassModelElements();
		this.pAssociation = new AssociationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.example.classes.Inlineedit".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ClassesGrammarAccess getClassesGrammarAccess() {
		return gaClasses;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//InlineClassModel ClassModel:
	//	ClassModel;
	public InlineClassModelElements getInlineClassModelAccess() {
		return pInlineClassModel;
	}
	
	public ParserRule getInlineClassModelRule() {
		return getInlineClassModelAccess().getRule();
	}
	
	//@Override
	//Association:
	//	Description?
	//	'association'
	//	name=ID
	//	'[' lowerBound=Value '..' upperBound=Value ']'
	//	source=[Class] '-->' target=[Class];
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//ClassModel:
	//	content+=Content*;
	public ClassesGrammarAccess.ClassModelElements getClassModelAccess() {
		return gaClasses.getClassModelAccess();
	}
	
	public ParserRule getClassModelRule() {
		return getClassModelAccess().getRule();
	}
	
	//Content:
	//	Constant
	//	| Class
	//	| super::Association;
	public ClassesGrammarAccess.ContentElements getContentAccess() {
		return gaClasses.getContentAccess();
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Constant:
	//	Description?
	//	'constant'
	//	name=ID
	//	'=' initial=Value;
	public ClassesGrammarAccess.ConstantElements getConstantAccess() {
		return gaClasses.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Class:
	//	Description?
	//	'class' name=ID '{'
	//	subClasses+=Class*
	//	attributes+=Attribute*
	//	'}';
	public ClassesGrammarAccess.ClassElements getClassAccess() {
		return gaClasses.getClassAccess();
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute:
	//	Description?
	//	visibility=Visibility
	//	name=ID
	//	':' type=Type
	//	'[' lowerBound=Value '..' upperBound=Value ']';
	public ClassesGrammarAccess.AttributeElements getAttributeAccess() {
		return gaClasses.getAttributeAccess();
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Type:
	//	BuiltInType
	//	| ClassRef;
	public ClassesGrammarAccess.TypeElements getTypeAccess() {
		return gaClasses.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BuiltInType:
	//	StringType
	//	| IntegerType;
	public ClassesGrammarAccess.BuiltInTypeElements getBuiltInTypeAccess() {
		return gaClasses.getBuiltInTypeAccess();
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType}
	//	'string';
	public ClassesGrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaClasses.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType}
	//	'integer';
	public ClassesGrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaClasses.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//ClassRef:
	//	target=[Class];
	public ClassesGrammarAccess.ClassRefElements getClassRefAccess() {
		return gaClasses.getClassRefAccess();
	}
	
	public ParserRule getClassRefRule() {
		return getClassRefAccess().getRule();
	}
	
	//enum Visibility:
	//	public='+' | public | protected='#' | protected | private='-' | private;
	public ClassesGrammarAccess.VisibilityElements getVisibilityAccess() {
		return gaClasses.getVisibilityAccess();
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//Value:
	//	IntegerLiteral
	//	| ConstantRef;
	public ClassesGrammarAccess.ValueElements getValueAccess() {
		return gaClasses.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntegerLiteral:
	//	value=INT;
	public ClassesGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaClasses.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//ConstantRef:
	//	target=[Constant];
	public ClassesGrammarAccess.ConstantRefElements getConstantRefAccess() {
		return gaClasses.getConstantRefAccess();
	}
	
	public ParserRule getConstantRefRule() {
		return getConstantRefAccess().getRule();
	}
	
	//fragment Description:
	//	description=DESCRIPTION_TEXT;
	public ClassesGrammarAccess.DescriptionElements getDescriptionAccess() {
		return gaClasses.getDescriptionAccess();
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//terminal DESCRIPTION_TEXT:
	//	'[[['->']]]';
	public TerminalRule getDESCRIPTION_TEXTRule() {
		return gaClasses.getDESCRIPTION_TEXTRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
