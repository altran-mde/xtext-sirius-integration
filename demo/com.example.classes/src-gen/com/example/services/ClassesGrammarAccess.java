/*
 * generated by Xtext 2.22.0
 */
package com.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ClassesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ClassModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.ClassModel");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentContentParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//ClassModel:
		//	content+=Content*;
		@Override public ParserRule getRule() { return rule; }
		
		//content+=Content*
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//Content
		public RuleCall getContentContentParserRuleCall_0() { return cContentContentParserRuleCall_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Content:
		//	Constant
		//	| Class
		//	| Association;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | Class | Association
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//Class
		public RuleCall getClassParserRuleCall_1() { return cClassParserRuleCall_1; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_2() { return cAssociationParserRuleCall_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitialValueParserRuleCall_4_0 = (RuleCall)cInitialAssignment_4.eContents().get(0);
		
		//Constant:
		//	Description?
		//	'constant'
		//	name=ID
		//	'=' initial=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//Description? 'constant' name=ID '=' initial=Value
		public Group getGroup() { return cGroup; }
		
		//Description?
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//'constant'
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initial=Value
		public Assignment getInitialAssignment_4() { return cInitialAssignment_4; }
		
		//Value
		public RuleCall getInitialValueParserRuleCall_4_0() { return cInitialValueParserRuleCall_4_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceClassCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceClassIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceClassCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetClassCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetClassIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetClassCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLowerBoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLowerBoundValueParserRuleCall_7_0 = (RuleCall)cLowerBoundAssignment_7.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUpperBoundAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUpperBoundValueParserRuleCall_9_0 = (RuleCall)cUpperBoundAssignment_9.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Association:
		//	Description?
		//	'association'
		//	name=ID
		//	source=[Class] '-->' target=[Class]
		//	'[' lowerBound=Value '..' upperBound=Value ']';
		@Override public ParserRule getRule() { return rule; }
		
		//Description? 'association' name=ID source=[Class] '-->' target=[Class] '[' lowerBound=Value '..' upperBound=Value ']'
		public Group getGroup() { return cGroup; }
		
		//Description?
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//'association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//source=[Class]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[Class]
		public CrossReference getSourceClassCrossReference_3_0() { return cSourceClassCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceClassIDTerminalRuleCall_3_0_1() { return cSourceClassIDTerminalRuleCall_3_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_4; }
		
		//target=[Class]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[Class]
		public CrossReference getTargetClassCrossReference_5_0() { return cTargetClassCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetClassIDTerminalRuleCall_5_0_1() { return cTargetClassIDTerminalRuleCall_5_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//lowerBound=Value
		public Assignment getLowerBoundAssignment_7() { return cLowerBoundAssignment_7; }
		
		//Value
		public RuleCall getLowerBoundValueParserRuleCall_7_0() { return cLowerBoundValueParserRuleCall_7_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_8() { return cFullStopFullStopKeyword_8; }
		
		//upperBound=Value
		public Assignment getUpperBoundAssignment_9() { return cUpperBoundAssignment_9; }
		
		//Value
		public RuleCall getUpperBoundValueParserRuleCall_9_0() { return cUpperBoundValueParserRuleCall_9_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubClassesClassParserRuleCall_4_0 = (RuleCall)cSubClassesAssignment_4.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Class:
		//	Description?
		//	'class' name=ID '{'
		//	subClasses+=Class*
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//Description? 'class' name=ID '{' subClasses+=Class* attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//Description?
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//subClasses+=Class*
		public Assignment getSubClassesAssignment_4() { return cSubClassesAssignment_4; }
		
		//Class
		public RuleCall getSubClassesClassParserRuleCall_4_0() { return cSubClassesClassParserRuleCall_4_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLowerBoundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLowerBoundValueParserRuleCall_6_0 = (RuleCall)cLowerBoundAssignment_6.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cUpperBoundAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUpperBoundValueParserRuleCall_8_0 = (RuleCall)cUpperBoundAssignment_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Attribute:
		//	Description?
		//	visibility=Visibility
		//	name=ID
		//	':' type=Type
		//	'[' lowerBound=Value '..' upperBound=Value ']';
		@Override public ParserRule getRule() { return rule; }
		
		//Description? visibility=Visibility name=ID ':' type=Type '[' lowerBound=Value '..' upperBound=Value ']'
		public Group getGroup() { return cGroup; }
		
		//Description?
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//visibility=Visibility
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//lowerBound=Value
		public Assignment getLowerBoundAssignment_6() { return cLowerBoundAssignment_6; }
		
		//Value
		public RuleCall getLowerBoundValueParserRuleCall_6_0() { return cLowerBoundValueParserRuleCall_6_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_7() { return cFullStopFullStopKeyword_7; }
		
		//upperBound=Value
		public Assignment getUpperBoundAssignment_8() { return cUpperBoundAssignment_8; }
		
		//Value
		public RuleCall getUpperBoundValueParserRuleCall_8_0() { return cUpperBoundValueParserRuleCall_8_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuiltInTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	BuiltInType
		//	| ClassRef;
		@Override public ParserRule getRule() { return rule; }
		
		//BuiltInType | ClassRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BuiltInType
		public RuleCall getBuiltInTypeParserRuleCall_0() { return cBuiltInTypeParserRuleCall_0; }
		
		//ClassRef
		public RuleCall getClassRefParserRuleCall_1() { return cClassRefParserRuleCall_1; }
	}
	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BuiltInType:
		//	StringType
		//	| IntegerType;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType | IntegerType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_1() { return cIntegerTypeParserRuleCall_1; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType}
		//	'string';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} 'string'
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//	{IntegerType}
		//	'integer';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} 'integer'
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class ClassRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.ClassRef");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetClassCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetClassIDTerminalRuleCall_0_1 = (RuleCall)cTargetClassCrossReference_0.eContents().get(1);
		
		//ClassRef:
		//	target=[Class];
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Class]
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//[Class]
		public CrossReference getTargetClassCrossReference_0() { return cTargetClassCrossReference_0; }
		
		//ID
		public RuleCall getTargetClassIDTerminalRuleCall_0_1() { return cTargetClassIDTerminalRuleCall_0_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	IntegerLiteral
		//	| ConstantRef;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral | ConstantRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//ConstantRef
		public RuleCall getConstantRefParserRuleCall_1() { return cConstantRefParserRuleCall_1; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ConstantRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.ConstantRef");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetConstantCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetConstantIDTerminalRuleCall_0_1 = (RuleCall)cTargetConstantCrossReference_0.eContents().get(1);
		
		//ConstantRef:
		//	target=[Constant];
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Constant]
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//[Constant]
		public CrossReference getTargetConstantCrossReference_0() { return cTargetConstantCrossReference_0; }
		
		//ID
		public RuleCall getTargetConstantIDTerminalRuleCall_0_1() { return cTargetConstantIDTerminalRuleCall_0_1; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Description");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionDESCRIPTION_TEXTTerminalRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//fragment Description:
		//	description=DESCRIPTION_TEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//description=DESCRIPTION_TEXT
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }
		
		//DESCRIPTION_TEXT
		public RuleCall getDescriptionDESCRIPTION_TEXTTerminalRuleCall_0() { return cDescriptionDESCRIPTION_TEXTTerminalRuleCall_0; }
	}
	
	public class VisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPlusSignKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPublicPublicKeyword_1_0 = (Keyword)cPublicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedNumberSignKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cProtectedProtectedKeyword_3_0 = (Keyword)cProtectedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPrivateHyphenMinusKeyword_4_0 = (Keyword)cPrivateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPrivatePrivateKeyword_5_0 = (Keyword)cPrivateEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Visibility:
		//	public='+' | public | protected='#' | protected | private='-' | private;
		public EnumRule getRule() { return rule; }
		
		//public='+' | public | protected='#' | protected | private='-' | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public='+'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPublicPlusSignKeyword_0_0() { return cPublicPlusSignKeyword_0_0; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_1() { return cPublicEnumLiteralDeclaration_1; }
		
		//'public'
		public Keyword getPublicPublicKeyword_1_0() { return cPublicPublicKeyword_1_0; }
		
		//protected='#'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'#'
		public Keyword getProtectedNumberSignKeyword_2_0() { return cProtectedNumberSignKeyword_2_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_3() { return cProtectedEnumLiteralDeclaration_3; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_3_0() { return cProtectedProtectedKeyword_3_0; }
		
		//private='-'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_4() { return cPrivateEnumLiteralDeclaration_4; }
		
		//'-'
		public Keyword getPrivateHyphenMinusKeyword_4_0() { return cPrivateHyphenMinusKeyword_4_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_5() { return cPrivateEnumLiteralDeclaration_5; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_5_0() { return cPrivatePrivateKeyword_5_0; }
	}
	
	private final ClassModelElements pClassModel;
	private final ContentElements pContent;
	private final ConstantElements pConstant;
	private final AssociationElements pAssociation;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final TypeElements pType;
	private final BuiltInTypeElements pBuiltInType;
	private final StringTypeElements pStringType;
	private final IntegerTypeElements pIntegerType;
	private final ClassRefElements pClassRef;
	private final VisibilityElements eVisibility;
	private final ValueElements pValue;
	private final IntegerLiteralElements pIntegerLiteral;
	private final ConstantRefElements pConstantRef;
	private final DescriptionElements pDescription;
	private final TerminalRule tDESCRIPTION_TEXT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ClassesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClassModel = new ClassModelElements();
		this.pContent = new ContentElements();
		this.pConstant = new ConstantElements();
		this.pAssociation = new AssociationElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pType = new TypeElements();
		this.pBuiltInType = new BuiltInTypeElements();
		this.pStringType = new StringTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pClassRef = new ClassRefElements();
		this.eVisibility = new VisibilityElements();
		this.pValue = new ValueElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pConstantRef = new ConstantRefElements();
		this.pDescription = new DescriptionElements();
		this.tDESCRIPTION_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.example.Classes.DESCRIPTION_TEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.example.Classes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ClassModel:
	//	content+=Content*;
	public ClassModelElements getClassModelAccess() {
		return pClassModel;
	}
	
	public ParserRule getClassModelRule() {
		return getClassModelAccess().getRule();
	}
	
	//Content:
	//	Constant
	//	| Class
	//	| Association;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Constant:
	//	Description?
	//	'constant'
	//	name=ID
	//	'=' initial=Value;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Association:
	//	Description?
	//	'association'
	//	name=ID
	//	source=[Class] '-->' target=[Class]
	//	'[' lowerBound=Value '..' upperBound=Value ']';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Class:
	//	Description?
	//	'class' name=ID '{'
	//	subClasses+=Class*
	//	attributes+=Attribute*
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute:
	//	Description?
	//	visibility=Visibility
	//	name=ID
	//	':' type=Type
	//	'[' lowerBound=Value '..' upperBound=Value ']';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Type:
	//	BuiltInType
	//	| ClassRef;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BuiltInType:
	//	StringType
	//	| IntegerType;
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return pBuiltInType;
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType}
	//	'string';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType}
	//	'integer';
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//ClassRef:
	//	target=[Class];
	public ClassRefElements getClassRefAccess() {
		return pClassRef;
	}
	
	public ParserRule getClassRefRule() {
		return getClassRefAccess().getRule();
	}
	
	//enum Visibility:
	//	public='+' | public | protected='#' | protected | private='-' | private;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//Value:
	//	IntegerLiteral
	//	| ConstantRef;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//ConstantRef:
	//	target=[Constant];
	public ConstantRefElements getConstantRefAccess() {
		return pConstantRef;
	}
	
	public ParserRule getConstantRefRule() {
		return getConstantRefAccess().getRule();
	}
	
	//fragment Description:
	//	description=DESCRIPTION_TEXT;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//terminal DESCRIPTION_TEXT:
	//	'[[['->']]]';
	public TerminalRule getDESCRIPTION_TEXTRule() {
		return tDESCRIPTION_TEXT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
