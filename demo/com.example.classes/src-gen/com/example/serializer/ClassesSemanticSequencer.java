/*
 * generated by Xtext 2.22.0
 */
package com.example.serializer;

import com.example.classes.Association;
import com.example.classes.Attribute;
import com.example.classes.ClassModel;
import com.example.classes.ClassRef;
import com.example.classes.ClassesPackage;
import com.example.classes.Constant;
import com.example.classes.ConstantRef;
import com.example.classes.IntegerLiteral;
import com.example.classes.IntegerType;
import com.example.classes.StringType;
import com.example.services.ClassesGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ClassesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ClassesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ClassesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ClassesPackage.ASSOCIATION:
				sequence_Association_Description(context, (Association) semanticObject); 
				return; 
			case ClassesPackage.ATTRIBUTE:
				sequence_Attribute_Description(context, (Attribute) semanticObject); 
				return; 
			case ClassesPackage.CLASS:
				sequence_Class_Description(context, (com.example.classes.Class) semanticObject); 
				return; 
			case ClassesPackage.CLASS_MODEL:
				sequence_ClassModel(context, (ClassModel) semanticObject); 
				return; 
			case ClassesPackage.CLASS_REF:
				sequence_ClassRef(context, (ClassRef) semanticObject); 
				return; 
			case ClassesPackage.CONSTANT:
				sequence_Constant_Description(context, (Constant) semanticObject); 
				return; 
			case ClassesPackage.CONSTANT_REF:
				sequence_ConstantRef(context, (ConstantRef) semanticObject); 
				return; 
			case ClassesPackage.INTEGER_LITERAL:
				sequence_IntegerLiteral(context, (IntegerLiteral) semanticObject); 
				return; 
			case ClassesPackage.INTEGER_TYPE:
				sequence_IntegerType(context, (IntegerType) semanticObject); 
				return; 
			case ClassesPackage.STRING_TYPE:
				sequence_StringType(context, (StringType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Content returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (
	 *         description=DESCRIPTION_TEXT? 
	 *         name=ID 
	 *         source=[Class|ID] 
	 *         target=[Class|ID] 
	 *         lowerBound=Value 
	 *         upperBound=Value
	 *     )
	 */
	protected void sequence_Association_Description(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         description=DESCRIPTION_TEXT? 
	 *         visibility=Visibility 
	 *         name=ID 
	 *         type=Type 
	 *         lowerBound=Value 
	 *         upperBound=Value
	 *     )
	 */
	protected void sequence_Attribute_Description(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassModel returns ClassModel
	 *
	 * Constraint:
	 *     content+=Content+
	 */
	protected void sequence_ClassModel(ISerializationContext context, ClassModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns ClassRef
	 *     ClassRef returns ClassRef
	 *
	 * Constraint:
	 *     target=[Class|ID]
	 */
	protected void sequence_ClassRef(ISerializationContext context, ClassRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ClassesPackage.Literals.CLASS_REF__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassesPackage.Literals.CLASS_REF__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassRefAccess().getTargetClassIDTerminalRuleCall_0_1(), semanticObject.eGet(ClassesPackage.Literals.CLASS_REF__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (description=DESCRIPTION_TEXT? name=ID subClasses+=Class* attributes+=Attribute*)
	 */
	protected void sequence_Class_Description(ISerializationContext context, com.example.classes.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ConstantRef
	 *     ConstantRef returns ConstantRef
	 *
	 * Constraint:
	 *     target=[Constant|ID]
	 */
	protected void sequence_ConstantRef(ISerializationContext context, ConstantRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ClassesPackage.Literals.CONSTANT_REF__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassesPackage.Literals.CONSTANT_REF__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantRefAccess().getTargetConstantIDTerminalRuleCall_0_1(), semanticObject.eGet(ClassesPackage.Literals.CONSTANT_REF__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Constant
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     (description=DESCRIPTION_TEXT? name=ID initial=Value)
	 */
	protected void sequence_Constant_Description(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntegerLiteral
	 *     IntegerLiteral returns IntegerLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerLiteral(ISerializationContext context, IntegerLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ClassesPackage.Literals.INTEGER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassesPackage.Literals.INTEGER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns IntegerType
	 *     BuiltInType returns IntegerType
	 *     IntegerType returns IntegerType
	 *
	 * Constraint:
	 *     {IntegerType}
	 */
	protected void sequence_IntegerType(ISerializationContext context, IntegerType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns StringType
	 *     BuiltInType returns StringType
	 *     StringType returns StringType
	 *
	 * Constraint:
	 *     {StringType}
	 */
	protected void sequence_StringType(ISerializationContext context, StringType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
