/**
 * generated by Xtext 2.22.0
 */
package com.altran.general.integration.xtextsirius.test.reflang.refLang.impl;

import com.altran.general.integration.xtextsirius.test.reflang.refLang.Leaf;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.RefLangPackage;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.Reference;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.Reference3;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.References;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.References2;
import com.altran.general.integration.xtextsirius.test.reflang.refLang.References3;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Leaf</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.altran.general.integration.xtextsirius.test.reflang.refLang.impl.LeafImpl#getReferences <em>References</em>}</li>
 *   <li>{@link com.altran.general.integration.xtextsirius.test.reflang.refLang.impl.LeafImpl#getReferences2 <em>References2</em>}</li>
 *   <li>{@link com.altran.general.integration.xtextsirius.test.reflang.refLang.impl.LeafImpl#getReferences3 <em>References3</em>}</li>
 *   <li>{@link com.altran.general.integration.xtextsirius.test.reflang.refLang.impl.LeafImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LeafImpl extends IContainerContentImpl implements Leaf
{
  /**
   * The cached value of the '{@link #getReferences() <em>References</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferences()
   * @generated
   * @ordered
   */
  protected EList<Reference> references;

  /**
   * The cached value of the '{@link #getReferences2() <em>References2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferences2()
   * @generated
   * @ordered
   */
  protected EList<Reference> references2;

  /**
   * The cached value of the '{@link #getReferences3() <em>References3</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferences3()
   * @generated
   * @ordered
   */
  protected EList<Reference3> references3;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LeafImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RefLangPackage.Literals.LEAF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Reference> getReferences()
  {
    if (references == null)
    {
      references = new EObjectContainmentEList<Reference>(Reference.class, this, RefLangPackage.LEAF__REFERENCES);
    }
    return references;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Reference> getReferences2()
  {
    if (references2 == null)
    {
      references2 = new EObjectContainmentEList<Reference>(Reference.class, this, RefLangPackage.LEAF__REFERENCES2);
    }
    return references2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Reference3> getReferences3()
  {
    if (references3 == null)
    {
      references3 = new EObjectContainmentEList<Reference3>(Reference3.class, this, RefLangPackage.LEAF__REFERENCES3);
    }
    return references3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RefLangPackage.LEAF__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RefLangPackage.LEAF__REFERENCES:
        return ((InternalEList<?>)getReferences()).basicRemove(otherEnd, msgs);
      case RefLangPackage.LEAF__REFERENCES2:
        return ((InternalEList<?>)getReferences2()).basicRemove(otherEnd, msgs);
      case RefLangPackage.LEAF__REFERENCES3:
        return ((InternalEList<?>)getReferences3()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RefLangPackage.LEAF__REFERENCES:
        return getReferences();
      case RefLangPackage.LEAF__REFERENCES2:
        return getReferences2();
      case RefLangPackage.LEAF__REFERENCES3:
        return getReferences3();
      case RefLangPackage.LEAF__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RefLangPackage.LEAF__REFERENCES:
        getReferences().clear();
        getReferences().addAll((Collection<? extends Reference>)newValue);
        return;
      case RefLangPackage.LEAF__REFERENCES2:
        getReferences2().clear();
        getReferences2().addAll((Collection<? extends Reference>)newValue);
        return;
      case RefLangPackage.LEAF__REFERENCES3:
        getReferences3().clear();
        getReferences3().addAll((Collection<? extends Reference3>)newValue);
        return;
      case RefLangPackage.LEAF__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RefLangPackage.LEAF__REFERENCES:
        getReferences().clear();
        return;
      case RefLangPackage.LEAF__REFERENCES2:
        getReferences2().clear();
        return;
      case RefLangPackage.LEAF__REFERENCES3:
        getReferences3().clear();
        return;
      case RefLangPackage.LEAF__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RefLangPackage.LEAF__REFERENCES:
        return references != null && !references.isEmpty();
      case RefLangPackage.LEAF__REFERENCES2:
        return references2 != null && !references2.isEmpty();
      case RefLangPackage.LEAF__REFERENCES3:
        return references3 != null && !references3.isEmpty();
      case RefLangPackage.LEAF__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == References.class)
    {
      switch (derivedFeatureID)
      {
        case RefLangPackage.LEAF__REFERENCES: return RefLangPackage.REFERENCES__REFERENCES;
        default: return -1;
      }
    }
    if (baseClass == References2.class)
    {
      switch (derivedFeatureID)
      {
        case RefLangPackage.LEAF__REFERENCES2: return RefLangPackage.REFERENCES2__REFERENCES2;
        default: return -1;
      }
    }
    if (baseClass == References3.class)
    {
      switch (derivedFeatureID)
      {
        case RefLangPackage.LEAF__REFERENCES3: return RefLangPackage.REFERENCES3__REFERENCES3;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == References.class)
    {
      switch (baseFeatureID)
      {
        case RefLangPackage.REFERENCES__REFERENCES: return RefLangPackage.LEAF__REFERENCES;
        default: return -1;
      }
    }
    if (baseClass == References2.class)
    {
      switch (baseFeatureID)
      {
        case RefLangPackage.REFERENCES2__REFERENCES2: return RefLangPackage.LEAF__REFERENCES2;
        default: return -1;
      }
    }
    if (baseClass == References3.class)
    {
      switch (baseFeatureID)
      {
        case RefLangPackage.REFERENCES3__REFERENCES3: return RefLangPackage.LEAF__REFERENCES3;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //LeafImpl
