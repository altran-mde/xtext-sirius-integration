/*
 * generated by Xtext 2.22.0
 */
package com.altran.general.integration.xtextsirius.test.reflang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RefLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.Container");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentsIContainerContentParserRuleCall_0 = (RuleCall)cContentsAssignment.eContents().get(0);
		
		//Container:
		//	contents+=IContainerContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//contents+=IContainerContent*
		public Assignment getContentsAssignment() { return cContentsAssignment; }
		
		//IContainerContent
		public RuleCall getContentsIContainerContentParserRuleCall_0() { return cContentsIContainerContentParserRuleCall_0; }
	}
	public class IContainerContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.IContainerContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeafParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IContainerContent:
		//	SubContainer
		//	| Leaf;
		@Override public ParserRule getRule() { return rule; }
		
		//SubContainer | Leaf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubContainer
		public RuleCall getSubContainerParserRuleCall_0() { return cSubContainerParserRuleCall_0; }
		
		//Leaf
		public RuleCall getLeafParserRuleCall_1() { return cLeafParserRuleCall_1; }
	}
	public class SubContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.SubContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubContentsIContainerContentParserRuleCall_2_0 = (RuleCall)cSubContentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cReferencesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cReferences2ParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cReferences3ParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//SubContainer:
		//	name=ID '{'
		//	subContents+=IContainerContent*
		//	'}'
		//	References?
		//	References2?
		//	References3?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' subContents+=IContainerContent* '}' References? References2? References3?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//subContents+=IContainerContent*
		public Assignment getSubContentsAssignment_2() { return cSubContentsAssignment_2; }
		
		//IContainerContent
		public RuleCall getSubContentsIContainerContentParserRuleCall_2_0() { return cSubContentsIContainerContentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//References?
		public RuleCall getReferencesParserRuleCall_4() { return cReferencesParserRuleCall_4; }
		
		//References2?
		public RuleCall getReferences2ParserRuleCall_5() { return cReferences2ParserRuleCall_5; }
		
		//References3?
		public RuleCall getReferences3ParserRuleCall_6() { return cReferences3ParserRuleCall_6; }
	}
	public class LeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.Leaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cReferencesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cReferences2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cReferences3ParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Leaf:
		//	name=ID
		//	References?
		//	References2?
		//	References3?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID References? References2? References3?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//References?
		public RuleCall getReferencesParserRuleCall_1() { return cReferencesParserRuleCall_1; }
		
		//References2?
		public RuleCall getReferences2ParserRuleCall_2() { return cReferences2ParserRuleCall_2; }
		
		//References3?
		public RuleCall getReferences3ParserRuleCall_3() { return cReferences3ParserRuleCall_3; }
	}
	public class ReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.References");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesReferenceParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		
		//fragment References:
		//	'1' references+=Reference*;
		@Override public ParserRule getRule() { return rule; }
		
		//'1' references+=Reference*
		public Group getGroup() { return cGroup; }
		
		//'1'
		public Keyword getDigitOneKeyword_0() { return cDigitOneKeyword_0; }
		
		//references+=Reference*
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_1_0() { return cReferencesReferenceParserRuleCall_1_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetIContainerContentCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetIContainerContentQIDParserRuleCall_1_0_1 = (RuleCall)cTargetIContainerContentCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTarget2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTarget2IContainerContentCrossReference_2_1_0 = (CrossReference)cTarget2Assignment_2_1.eContents().get(0);
		private final RuleCall cTarget2IContainerContentQIDParserRuleCall_2_1_0_1 = (RuleCall)cTarget2IContainerContentCrossReference_2_1_0.eContents().get(1);
		
		//Reference:
		//	'->' target=[IContainerContent|QID] ('/' target2=[IContainerContent|QID])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' target=[IContainerContent|QID] ('/' target2=[IContainerContent|QID])?
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//target=[IContainerContent|QID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[IContainerContent|QID]
		public CrossReference getTargetIContainerContentCrossReference_1_0() { return cTargetIContainerContentCrossReference_1_0; }
		
		//QID
		public RuleCall getTargetIContainerContentQIDParserRuleCall_1_0_1() { return cTargetIContainerContentQIDParserRuleCall_1_0_1; }
		
		//('/' target2=[IContainerContent|QID])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//target2=[IContainerContent|QID]
		public Assignment getTarget2Assignment_2_1() { return cTarget2Assignment_2_1; }
		
		//[IContainerContent|QID]
		public CrossReference getTarget2IContainerContentCrossReference_2_1_0() { return cTarget2IContainerContentCrossReference_2_1_0; }
		
		//QID
		public RuleCall getTarget2IContainerContentQIDParserRuleCall_2_1_0_1() { return cTarget2IContainerContentQIDParserRuleCall_2_1_0_1; }
	}
	public class References2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.References2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferences2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferences2ReferenceParserRuleCall_1_0 = (RuleCall)cReferences2Assignment_1.eContents().get(0);
		
		//fragment References2:
		//	'2' references2+=Reference*;
		@Override public ParserRule getRule() { return rule; }
		
		//'2' references2+=Reference*
		public Group getGroup() { return cGroup; }
		
		//'2'
		public Keyword getDigitTwoKeyword_0() { return cDigitTwoKeyword_0; }
		
		//references2+=Reference*
		public Assignment getReferences2Assignment_1() { return cReferences2Assignment_1; }
		
		//Reference
		public RuleCall getReferences2ReferenceParserRuleCall_1_0() { return cReferences2ReferenceParserRuleCall_1_0; }
	}
	public class References3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.References3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferences3Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferences3Reference3ParserRuleCall_1_0 = (RuleCall)cReferences3Assignment_1.eContents().get(0);
		
		//fragment References3:
		//	'3' references3+=Reference3*;
		@Override public ParserRule getRule() { return rule; }
		
		//'3' references3+=Reference3*
		public Group getGroup() { return cGroup; }
		
		//'3'
		public Keyword getDigitThreeKeyword_0() { return cDigitThreeKeyword_0; }
		
		//references3+=Reference3*
		public Assignment getReferences3Assignment_1() { return cReferences3Assignment_1; }
		
		//Reference3
		public RuleCall getReferences3Reference3ParserRuleCall_1_0() { return cReferences3Reference3ParserRuleCall_1_0; }
	}
	public class Reference3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.Reference3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTarget3Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTarget3IContainerContentCrossReference_1_0 = (CrossReference)cTarget3Assignment_1.eContents().get(0);
		private final RuleCall cTarget3IContainerContentQIDParserRuleCall_1_0_1 = (RuleCall)cTarget3IContainerContentCrossReference_1_0.eContents().get(1);
		
		//Reference3:
		//	'->' target3=[IContainerContent|QID];
		@Override public ParserRule getRule() { return rule; }
		
		//'->' target3=[IContainerContent|QID]
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//target3=[IContainerContent|QID]
		public Assignment getTarget3Assignment_1() { return cTarget3Assignment_1; }
		
		//[IContainerContent|QID]
		public CrossReference getTarget3IContainerContentCrossReference_1_0() { return cTarget3IContainerContentCrossReference_1_0; }
		
		//QID
		public RuleCall getTarget3IContainerContentQIDParserRuleCall_1_0_1() { return cTarget3IContainerContentQIDParserRuleCall_1_0_1; }
	}
	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.reflang.RefLang.QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ContainerElements pContainer;
	private final IContainerContentElements pIContainerContent;
	private final SubContainerElements pSubContainer;
	private final LeafElements pLeaf;
	private final ReferencesElements pReferences;
	private final ReferenceElements pReference;
	private final References2Elements pReferences2;
	private final References3Elements pReferences3;
	private final Reference3Elements pReference3;
	private final QIDElements pQID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RefLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContainer = new ContainerElements();
		this.pIContainerContent = new IContainerContentElements();
		this.pSubContainer = new SubContainerElements();
		this.pLeaf = new LeafElements();
		this.pReferences = new ReferencesElements();
		this.pReference = new ReferenceElements();
		this.pReferences2 = new References2Elements();
		this.pReferences3 = new References3Elements();
		this.pReference3 = new Reference3Elements();
		this.pQID = new QIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.altran.general.integration.xtextsirius.test.reflang.RefLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Container:
	//	contents+=IContainerContent*;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//IContainerContent:
	//	SubContainer
	//	| Leaf;
	public IContainerContentElements getIContainerContentAccess() {
		return pIContainerContent;
	}
	
	public ParserRule getIContainerContentRule() {
		return getIContainerContentAccess().getRule();
	}
	
	//SubContainer:
	//	name=ID '{'
	//	subContents+=IContainerContent*
	//	'}'
	//	References?
	//	References2?
	//	References3?;
	public SubContainerElements getSubContainerAccess() {
		return pSubContainer;
	}
	
	public ParserRule getSubContainerRule() {
		return getSubContainerAccess().getRule();
	}
	
	//Leaf:
	//	name=ID
	//	References?
	//	References2?
	//	References3?;
	public LeafElements getLeafAccess() {
		return pLeaf;
	}
	
	public ParserRule getLeafRule() {
		return getLeafAccess().getRule();
	}
	
	//fragment References:
	//	'1' references+=Reference*;
	public ReferencesElements getReferencesAccess() {
		return pReferences;
	}
	
	public ParserRule getReferencesRule() {
		return getReferencesAccess().getRule();
	}
	
	//Reference:
	//	'->' target=[IContainerContent|QID] ('/' target2=[IContainerContent|QID])?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//fragment References2:
	//	'2' references2+=Reference*;
	public References2Elements getReferences2Access() {
		return pReferences2;
	}
	
	public ParserRule getReferences2Rule() {
		return getReferences2Access().getRule();
	}
	
	//fragment References3:
	//	'3' references3+=Reference3*;
	public References3Elements getReferences3Access() {
		return pReferences3;
	}
	
	public ParserRule getReferences3Rule() {
		return getReferences3Access().getRule();
	}
	
	//Reference3:
	//	'->' target3=[IContainerContent|QID];
	public Reference3Elements getReference3Access() {
		return pReference3;
	}
	
	public ParserRule getReference3Rule() {
		return getReference3Access().getRule();
	}
	
	//QID:
	//	ID ('.' ID)*;
	public QIDElements getQIDAccess() {
		return pQID;
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
