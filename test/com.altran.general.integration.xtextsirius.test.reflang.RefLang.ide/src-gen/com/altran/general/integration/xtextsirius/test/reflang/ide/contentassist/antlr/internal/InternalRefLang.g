/*
 * generated by Xtext 2.22.0
 */
grammar InternalRefLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.altran.general.integration.xtextsirius.test.reflang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.altran.general.integration.xtextsirius.test.reflang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.altran.general.integration.xtextsirius.test.reflang.services.RefLangGrammarAccess;

}
@parser::members {
	private RefLangGrammarAccess grammarAccess;

	public void setGrammarAccess(RefLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleContainer
entryRuleContainer
:
{ before(grammarAccess.getContainerRule()); }
	 ruleContainer
{ after(grammarAccess.getContainerRule()); } 
	 EOF 
;

// Rule Container
ruleContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerAccess().getContentsAssignment()); }
		(rule__Container__ContentsAssignment)*
		{ after(grammarAccess.getContainerAccess().getContentsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIContainerContent
entryRuleIContainerContent
:
{ before(grammarAccess.getIContainerContentRule()); }
	 ruleIContainerContent
{ after(grammarAccess.getIContainerContentRule()); } 
	 EOF 
;

// Rule IContainerContent
ruleIContainerContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIContainerContentAccess().getAlternatives()); }
		(rule__IContainerContent__Alternatives)
		{ after(grammarAccess.getIContainerContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubContainer
entryRuleSubContainer
:
{ before(grammarAccess.getSubContainerRule()); }
	 ruleSubContainer
{ after(grammarAccess.getSubContainerRule()); } 
	 EOF 
;

// Rule SubContainer
ruleSubContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubContainerAccess().getGroup()); }
		(rule__SubContainer__Group__0)
		{ after(grammarAccess.getSubContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeaf
entryRuleLeaf
:
{ before(grammarAccess.getLeafRule()); }
	 ruleLeaf
{ after(grammarAccess.getLeafRule()); } 
	 EOF 
;

// Rule Leaf
ruleLeaf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeafAccess().getGroup()); }
		(rule__Leaf__Group__0)
		{ after(grammarAccess.getLeafAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule References
ruleReferences 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferencesAccess().getGroup()); }
		(rule__References__Group__0)
		{ after(grammarAccess.getReferencesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule References2
ruleReferences2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferences2Access().getGroup()); }
		(rule__References2__Group__0)
		{ after(grammarAccess.getReferences2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule References3
ruleReferences3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferences3Access().getGroup()); }
		(rule__References3__Group__0)
		{ after(grammarAccess.getReferences3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference3
entryRuleReference3
:
{ before(grammarAccess.getReference3Rule()); }
	 ruleReference3
{ after(grammarAccess.getReference3Rule()); } 
	 EOF 
;

// Rule Reference3
ruleReference3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReference3Access().getGroup()); }
		(rule__Reference3__Group__0)
		{ after(grammarAccess.getReference3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQID
entryRuleQID
:
{ before(grammarAccess.getQIDRule()); }
	 ruleQID
{ after(grammarAccess.getQIDRule()); } 
	 EOF 
;

// Rule QID
ruleQID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQIDAccess().getGroup()); }
		(rule__QID__Group__0)
		{ after(grammarAccess.getQIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IContainerContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIContainerContentAccess().getSubContainerParserRuleCall_0()); }
		ruleSubContainer
		{ after(grammarAccess.getIContainerContentAccess().getSubContainerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIContainerContentAccess().getLeafParserRuleCall_1()); }
		ruleLeaf
		{ after(grammarAccess.getIContainerContentAccess().getLeafParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__0__Impl
	rule__SubContainer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getNameAssignment_0()); }
	(rule__SubContainer__NameAssignment_0)
	{ after(grammarAccess.getSubContainerAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__1__Impl
	rule__SubContainer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSubContainerAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__2__Impl
	rule__SubContainer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getSubContentsAssignment_2()); }
	(rule__SubContainer__SubContentsAssignment_2)*
	{ after(grammarAccess.getSubContainerAccess().getSubContentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__3__Impl
	rule__SubContainer__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSubContainerAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__4__Impl
	rule__SubContainer__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getReferencesParserRuleCall_4()); }
	(ruleReferences)?
	{ after(grammarAccess.getSubContainerAccess().getReferencesParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__5__Impl
	rule__SubContainer__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getReferences2ParserRuleCall_5()); }
	(ruleReferences2)?
	{ after(grammarAccess.getSubContainerAccess().getReferences2ParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubContainer__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubContainerAccess().getReferences3ParserRuleCall_6()); }
	(ruleReferences3)?
	{ after(grammarAccess.getSubContainerAccess().getReferences3ParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Leaf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__0__Impl
	rule__Leaf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getNameAssignment_0()); }
	(rule__Leaf__NameAssignment_0)
	{ after(grammarAccess.getLeafAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__1__Impl
	rule__Leaf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getReferencesParserRuleCall_1()); }
	(ruleReferences)?
	{ after(grammarAccess.getLeafAccess().getReferencesParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__2__Impl
	rule__Leaf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getReferences2ParserRuleCall_2()); }
	(ruleReferences2)?
	{ after(grammarAccess.getLeafAccess().getReferences2ParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getReferences3ParserRuleCall_3()); }
	(ruleReferences3)?
	{ after(grammarAccess.getLeafAccess().getReferences3ParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__References__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References__Group__0__Impl
	rule__References__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__References__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferencesAccess().getDigitOneKeyword_0()); }
	'1'
	{ after(grammarAccess.getReferencesAccess().getDigitOneKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__References__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__References__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferencesAccess().getReferencesAssignment_1()); }
	(rule__References__ReferencesAssignment_1)*
	{ after(grammarAccess.getReferencesAccess().getReferencesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
	'->'
	{ after(grammarAccess.getReferenceAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
	rule__Reference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getTargetAssignment_1()); }
	(rule__Reference__TargetAssignment_1)
	{ after(grammarAccess.getReferenceAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getGroup_2()); }
	(rule__Reference__Group_2__0)?
	{ after(grammarAccess.getReferenceAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_2__0__Impl
	rule__Reference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getSolidusKeyword_2_0()); }
	'/'
	{ after(grammarAccess.getReferenceAccess().getSolidusKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getTarget2Assignment_2_1()); }
	(rule__Reference__Target2Assignment_2_1)
	{ after(grammarAccess.getReferenceAccess().getTarget2Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__References2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References2__Group__0__Impl
	rule__References2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__References2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferences2Access().getDigitTwoKeyword_0()); }
	'2'
	{ after(grammarAccess.getReferences2Access().getDigitTwoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__References2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__References2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferences2Access().getReferences2Assignment_1()); }
	(rule__References2__References2Assignment_1)*
	{ after(grammarAccess.getReferences2Access().getReferences2Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__References3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References3__Group__0__Impl
	rule__References3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__References3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferences3Access().getDigitThreeKeyword_0()); }
	'3'
	{ after(grammarAccess.getReferences3Access().getDigitThreeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__References3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__References3__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__References3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferences3Access().getReferences3Assignment_1()); }
	(rule__References3__References3Assignment_1)*
	{ after(grammarAccess.getReferences3Access().getReferences3Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference3__Group__0__Impl
	rule__Reference3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReference3Access().getHyphenMinusGreaterThanSignKeyword_0()); }
	'->'
	{ after(grammarAccess.getReference3Access().getHyphenMinusGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference3__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReference3Access().getTarget3Assignment_1()); }
	(rule__Reference3__Target3Assignment_1)
	{ after(grammarAccess.getReference3Access().getTarget3Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group__0__Impl
	rule__QID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getGroup_1()); }
	(rule__QID__Group_1__0)*
	{ after(grammarAccess.getQIDAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group_1__0__Impl
	rule__QID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__ContentsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getContentsIContainerContentParserRuleCall_0()); }
		ruleIContainerContent
		{ after(grammarAccess.getContainerAccess().getContentsIContainerContentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubContainerAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSubContainerAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubContainer__SubContentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubContainerAccess().getSubContentsIContainerContentParserRuleCall_2_0()); }
		ruleIContainerContent
		{ after(grammarAccess.getSubContainerAccess().getSubContentsIContainerContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeafAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLeafAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__References__ReferencesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferencesAccess().getReferencesReferenceParserRuleCall_1_0()); }
		ruleReference
		{ after(grammarAccess.getReferencesAccess().getReferencesReferenceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getTargetIContainerContentCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getTargetIContainerContentQIDParserRuleCall_1_0_1()); }
			ruleQID
			{ after(grammarAccess.getReferenceAccess().getTargetIContainerContentQIDParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getTargetIContainerContentCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Target2Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getTarget2IContainerContentCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getTarget2IContainerContentQIDParserRuleCall_2_1_0_1()); }
			ruleQID
			{ after(grammarAccess.getReferenceAccess().getTarget2IContainerContentQIDParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getTarget2IContainerContentCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__References2__References2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferences2Access().getReferences2ReferenceParserRuleCall_1_0()); }
		ruleReference
		{ after(grammarAccess.getReferences2Access().getReferences2ReferenceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__References3__References3Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferences3Access().getReferences3Reference3ParserRuleCall_1_0()); }
		ruleReference3
		{ after(grammarAccess.getReferences3Access().getReferences3Reference3ParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference3__Target3Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReference3Access().getTarget3IContainerContentCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReference3Access().getTarget3IContainerContentQIDParserRuleCall_1_0_1()); }
			ruleQID
			{ after(grammarAccess.getReference3Access().getTarget3IContainerContentQIDParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReference3Access().getTarget3IContainerContentCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
