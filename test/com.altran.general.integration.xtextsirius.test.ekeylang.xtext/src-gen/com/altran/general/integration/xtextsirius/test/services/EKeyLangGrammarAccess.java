/*
 * generated by Xtext 2.22.0
 */
package com.altran.general.integration.xtextsirius.test.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EKeyLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.EKeyLang.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsIContainerContentParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		
		//Container:
		//	{Container}
		//	'Container' name=ID
		//	contents+=IContainerContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Container} 'Container' name=ID contents+=IContainerContent*
		public Group getGroup() { return cGroup; }
		
		//{Container}
		public Action getContainerAction_0() { return cContainerAction_0; }
		
		//'Container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//contents+=IContainerContent*
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }
		
		//IContainerContent
		public RuleCall getContentsIContainerContentParserRuleCall_3_0() { return cContentsIContainerContentParserRuleCall_3_0; }
	}
	public class IContainerContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.EKeyLang.IContainerContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeafParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IContainerContent:
		//	Group | Leaf;
		@Override public ParserRule getRule() { return rule; }
		
		//Group | Leaf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Group
		public RuleCall getGroupParserRuleCall_0() { return cGroupParserRuleCall_0; }
		
		//Leaf
		public RuleCall getLeafParserRuleCall_1() { return cLeafParserRuleCall_1; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.EKeyLang.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeafsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeafsIContainerContentParserRuleCall_3_0 = (RuleCall)cLeafsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Group:
		//	{Group} name=ID
		//	'{'
		//	leafs+=IContainerContent*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Group} name=ID '{' leafs+=IContainerContent* '}'
		public Group getGroup() { return cGroup; }
		
		//{Group}
		public Action getGroupAction_0() { return cGroupAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//leafs+=IContainerContent*
		public Assignment getLeafsAssignment_3() { return cLeafsAssignment_3; }
		
		//IContainerContent
		public RuleCall getLeafsIContainerContentParserRuleCall_3_0() { return cLeafsIContainerContentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.general.integration.xtextsirius.test.EKeyLang.Leaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Leaf:
		//	name=ID number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID number=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	
	
	private final ContainerElements pContainer;
	private final IContainerContentElements pIContainerContent;
	private final GroupElements pGroup;
	private final LeafElements pLeaf;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EKeyLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContainer = new ContainerElements();
		this.pIContainerContent = new IContainerContentElements();
		this.pGroup = new GroupElements();
		this.pLeaf = new LeafElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.altran.general.integration.xtextsirius.test.EKeyLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Container:
	//	{Container}
	//	'Container' name=ID
	//	contents+=IContainerContent*;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//IContainerContent:
	//	Group | Leaf;
	public IContainerContentElements getIContainerContentAccess() {
		return pIContainerContent;
	}
	
	public ParserRule getIContainerContentRule() {
		return getIContainerContentAccess().getRule();
	}
	
	//Group:
	//	{Group} name=ID
	//	'{'
	//	leafs+=IContainerContent*
	//	'}';
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Leaf:
	//	name=ID number=INT;
	public LeafElements getLeafAccess() {
		return pLeaf;
	}
	
	public ParserRule getLeafRule() {
		return getLeafAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
